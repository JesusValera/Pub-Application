<?php

namespace AppBundle\Repository;

use Doctrine\ORM\Query\ResultSetMapping;

/**
 * TapaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TapaRepository extends \Doctrine\ORM\EntityRepository
{
    public function findTapasInPage($page = 1, $NUM_TAPAS = 3)
    {
        $page = ($page > 0) ? $page : 1;

        $query = $this->createQueryBuilder('t')
            ->where('t.top = 1')
            ->setFirstResult($NUM_TAPAS * ($page - 1))
            ->setMaxResults($NUM_TAPAS)
            ->orderBy('t.id', 'ASC')
            ->getQuery();

        return $query->getResult();
    }

    public function findTotalNumberOfPages($NUM_TAPAS = 3)
    {
        $config = new \Doctrine\ORM\Configuration();
        $config->addCustomNumericFunction('Ceil', 'AppBundle\Query\Ceil');

        $pages = $this->getEntityManager()->createQuery("
            SELECT CEIL(COUNT(t.id) / :numTapas )
            FROM AppBundle:Tapa t
            WHERE t.top = 1
            ")
            ->setParameter('numTapas', $NUM_TAPAS)
            ->getResult()[0][1];

        /* THE SAME. */
        /*$pages = $this->createQueryBuilder('t')
            ->select("CEIL(count(t.id) / :numTapas"))
            ->where('t.top = 1')
            ->getQuery()
            ->setParameter('numTapas', $NUM_TAPAS)
            ->getResult()[0][1];*/

        return $pages;
    }

    public function findRelatedTapas($id, $category)
    {
        $rsm = new ResultSetMapping();
        $rsm->addEntityResult('AppBundle:Tapa', 't');
        $rsm->addFieldResult('t', 'id', 'id');
        $rsm->addFieldResult('t', 'name', 'name');
        $rsm->addFieldResult('t', 'picture', 'picture');

        // This query selects 4 tapas from the DB with the same category,
        //  if there aren't enough tapas with the same category, it will get
        //  random tapas.
        // The current tapa won't ever be displayed as a related tapa.
        $result = $this->getEntityManager()->createNativeQuery(
            "(SELECT t.id, t.name, t.picture
                 FROM tapa t
                 WHERE t.category_id = :category
                 AND t.id != :id
                 ORDER BY t.category_id DESC)
                UNION
                (SELECT t2.id, t2.name, t2.picture 
                 FROM tapa t2
                 WHERE t2.category_id != :category
                 AND t2.id != :id
                 ORDER BY t2.category_id DESC)
                LIMIT 4", $rsm)
            ->setParameter('category', $category)
            ->setParameter('id', $id)
            ->getResult();

        return $result;
    }
}
