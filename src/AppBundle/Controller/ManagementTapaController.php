<?php

namespace AppBundle\Controller;

use AppBundle\Entity\Category;
use AppBundle\Entity\Ingredient;
use AppBundle\Entity\Tapa;
use AppBundle\Form\CategoryType;
use AppBundle\Form\IngredientType;
use AppBundle\Form\TapaType;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

/**
 * @Route("/management")
 */
class ManagementTapaController extends Controller
{
    /**
     * @Route("/newTapa", name="newTapa")
     */
    public function newTapaAction(Request $request): Response
    {
        $tapa = new Tapa();

        $form = $this->createForm(TapaType::class, $tapa);

        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {

            $tapaUpdated = $this->createTapaObj($tapa);

            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($tapaUpdated);
            $entityManager->flush();

            return $this->redirectToRoute('detail_tapa', [
                "id" => $tapaUpdated->getId(),
            ]);
        }

        return $this->render('management/new_tapa.html.twig', [
            'form' => $form->createView(),
        ]);
    }

    private function createTapaObj(Tapa $tapa): Tapa
    {
        $fileName = $this->getPictureName($tapa->getPictureFile());
        $tapa->setPicture($fileName);
        $tapa->setCreationDate(new \DateTime());

        return $tapa;
    }

    /**
     * @Route("/newCategory", name="newCategory")
     */
    public function newCategoryAction(Request $request): Response
    {
        $category = new Category();

        $form = $this->createForm(CategoryType::class, $category);

        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {

            $categoryUpdated = $this->createCategoryObject($category);

            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($categoryUpdated);
            $entityManager->flush();

            return $this->redirectToRoute('detail_category', [
                "id" => $categoryUpdated->getId(),
            ]);
        }

        return $this->render('management/new_category.html.twig', [
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/newIngredient", name="newIngredient")
     */
    public function newIngredientAction(Request $request): Response
    {
        $ingredient = new Ingredient();

        $form = $this->createForm(IngredientType::class, $ingredient);

        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {

            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($ingredient);
            $entityManager->flush();

            return $this->redirectToRoute('detail_ingredient', [
                "id" => $ingredient->getId(),
            ]);
        }

        return $this->render('management/new_ingredient.html.twig', [
            'form' => $form->createView(),
        ]);
    }

    private function createCategoryObject(Category $category): Category
    {
        $fileName = $this->getPictureName($category->getPictureFile());
        $category->setPicture($fileName);

        return $category;
    }

    private function getPictureName(?File $file): string
    {
        if (!isset($file)) {
            $DEFAULT_PICTURE_NAME = 'nopic.jpg';

            return $DEFAULT_PICTURE_NAME;
        }

        $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
        $this->movePictureFromTmpToProject($file, $fileName);

        return $fileName;
    }

    private function movePictureFromTmpToProject(File $file, $fileName)
    {
        $file->move($this->getParameter('tapasImg_dir'), $fileName);
    }

    private function generateUniqueFileName(): string
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps.
        return md5(uniqid());
    }

}
